class State:
	board = 4x4
	def __init__(board):
		self.board = board

	def move(direction): self.board = new_board
		-med evt. undermetoder for å håndtere merging av ruter
	
	spawn() self.board = new_board with a spawned new value
	p = 0.9 for 2er; 0.1 for 4er. uniform for alle ruter

	calculate_heuristic() returns the h for this state

class GUI:
	-guishit

class mini_max:
	def alpha_beta_pruning()
	def make_tree(depth)
	def move_possible()
	def find_next_move(state) return move


def main():
	start_state = State.State()
	while-opplegg


if __name__ == "main":
	main()
########### Idèer ###########
gå dypere når det blir flere unike tall på brettet
12 eller 24 spawns i treet?

Heuristics: 
høyste verdier mot et hjørne
flest mulig åpne ruter

-les på nett